import argparse
import re
from pathlib import Path
from typing import NamedTuple, Tuple, Optional

from .core import CoreToxConfig
from .. import BuildSystem, FileConf


class VenvCore(NamedTuple):
    root_dir: Path
    bin_path: Path
    executable: Path
    site_package: Path


class Python(NamedTuple):
    python_name: str
    exe: Path
    version: str
    version_info: Tuple[int, int, int, str]

    @property
    def major_version(self) -> int:
        return self.version_info[0]


class EnvConfig(CoreToxConfig):
    def __init__(self,
                 _options: argparse.Namespace,
                 build_system: BuildSystem,
                 file: FileConf,
                 name: str):
        super().__init__(_options, build_system, file)
        self.name = name
        # generated by running
        self.base_python: Optional[Python] = None  # interpreter resolution
        self.venv: Optional[VenvCore] = None  # virtualenv generation

    @property
    def python(self) -> str:
        key = 'basepython'
        if key in self._file:
            return self._file[key]
        match = re.match(r'py(\d)(\d)', self.name)
        if match:
            return 'python{}.{}'.format(match.group(1), match.group(2))
        raise ValueError('no base python for {}'.format(self.name))

    @property
    def recreate(self) -> bool:
        return self._options.__getattribute__('recreate')

    @property
    def build_wheel(self) -> bool:
        return self._file.get('build_wheel', True)

    @property
    def build_type(self) -> str:
        return 'wheel' if self.build_wheel else 'sdist'
