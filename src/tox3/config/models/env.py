import argparse
import re
from pathlib import Path
from typing import Optional, cast

from tox3.venv import Venv, Python
from .core import CoreToxConfig
from ..project import BuildSystem, FileConf


class EnvConfig(CoreToxConfig):
    def __init__(self,
                 _options: argparse.Namespace,
                 build_system: BuildSystem,
                 file: FileConf,
                 name: str) -> None:
        super().__init__(_options, build_system, file)
        self.name = name
        # generated by running
        self.base_python: Optional[Python] = None  # interpreter resolution
        self.venv: Optional[Venv] = None  # virtualenv generation

    @property
    def python(self) -> str:
        key = 'basepython'
        if key in self._file:
            return cast(str, self._file[key])
        match = re.match(r'py(\d)(\d)', self.name)
        if match:
            return 'python{}.{}'.format(match.group(1), match.group(2))
        raise ValueError('no base python for {}'.format(self.name))

    @property
    def recreate(self) -> bool:
        return cast(bool, self._options.__getattribute__('recreate'))

    @property
    def build_wheel(self) -> bool:
        return self._file.get('build_wheel', True)

    @property
    def build_type(self) -> str:
        return 'wheel' if self.build_wheel else 'sdist'

    @property
    def envsitepackagesdir(self) -> Path:
        self.ensure_venv_ready()
        return cast(Venv, self.venv).core.site_package

    @property
    def envbindir(self) -> Path:
        self.ensure_venv_ready()
        return cast(Venv, self.venv).core.bin_path

    def ensure_venv_ready(self) -> None:
        if self.venv is None:
            raise TypeError('virtual environment not yet created')

    @property
    def envdir(self) -> Path:
        self.ensure_venv_ready()
        return cast(Venv, self.venv).core.root_dir

    @property
    def envpython(self) -> Path:
        self.ensure_venv_ready()
        return cast(Venv, self.venv).core.executable

    @property
    def envname(self) -> str:
        return self.name
